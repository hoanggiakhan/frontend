import React, { useState, useEffect } from "react";
import { Container, Row, Col, Card, Table, Button, Modal, Form } from "react-bootstrap";
import axios from "axios";
import { getIdUserByToken } from "../../utils/JwtService";
import { URL } from "../../utils/UrlBackend";

interface Category {
  id: string;
  name: string;
  type: "income" | "expense";
}

const CategoryManager: React.FC = () => {
  const userId = getIdUserByToken();
  const [categories, setCategories] = useState<Category[]>([]);
  const [showAddModal, setShowAddModal] = useState<boolean>(false);
  const [showEditModal, setShowEditModal] = useState<boolean>(false);
  const [newCategory, setNewCategory] = useState<Category>({ id: "", name: "", type: "expense" });
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);

  // üîπ L·∫•y danh s√°ch danh m·ª•c t·ª´ API
  const fetchCategories = async () => {
    try {
      const response = await axios.get(`${URL}/api/categories/${userId}`);
      setCategories(response.data);
    } catch (error) {
      console.error("C√≥ l·ªói khi l·∫•y danh m·ª•c:", error);
      alert("L·ªói khi l·∫•y danh m·ª•c");
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  // üîπ Th√™m danh m·ª•c m·ªõi
  const createCategory = async () => {
    try {
      const token = localStorage.getItem("token");
      await axios.post(`${URL}/api/categories/create/${userId}`, newCategory, {
        headers: { Authorization: `Bearer ${token}` },
      });

      setShowAddModal(false);
      fetchCategories(); // C·∫≠p nh·∫≠t danh s√°ch
    } catch (error) {
      console.error("L·ªói khi th√™m danh m·ª•c:", error);
      alert("Kh√¥ng th·ªÉ th√™m danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  // üîπ Ch·ªânh s·ª≠a danh m·ª•c
  const updateCategory = async () => {
    if (!selectedCategory || !selectedCategory.id) {
      alert("L·ªói: ID danh m·ª•c kh√¥ng h·ª£p l·ªá!");
      return;
    }
  
    try {
      const token = localStorage.getItem("token");
      await axios.put(`${URL}/api/categories/${selectedCategory.id}`, selectedCategory, {
        headers: { Authorization: `Bearer ${token}` },
      });
  
      setShowEditModal(false);
      fetchCategories();
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };
  

  // üîπ X√≥a danh m·ª•c
  const handleDeleteCategory = async (id: string) => {
    try {
      const token = localStorage.getItem("token");
      await axios.delete(`${URL}/api/categories/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      fetchCategories();
    } catch (error) {
      console.error("L·ªói khi x√≥a danh m·ª•c:", error);
      alert("Kh√¥ng th·ªÉ x√≥a danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <Container fluid>
      <Row>
        <Col md={12}>
          <Card className="mb-3">
            <Card.Body>
              <Card.Title>Danh s√°ch danh m·ª•c</Card.Title>
              <Button
                variant="primary"
                onClick={() => {
                  setNewCategory({ id: "", name: "", type: "expense" });
                  setShowAddModal(true);
                }}
                className="mb-3"
              >
                Th√™m danh m·ª•c
              </Button>
              <Table striped bordered hover responsive>
                <thead>
                  <tr>
                    <th>T√™n danh m·ª•c</th>
                    <th>Lo·∫°i</th>
                    <th>H√†nh ƒë·ªông</th>
                  </tr>
                </thead>
                <tbody>
                  {categories.map((category) => (
                    <tr key={category.id}>
                      <td>{category.name}</td>
                      <td>{category.type === "income" ? "Thu nh·∫≠p" : "Chi ti√™u"}</td>
                      <td>
                        <Button
                          variant="warning"
                          onClick={() => {
                            setSelectedCategory(category);
                            setShowEditModal(true);
                          }}
                          className="me-2"
                        >
                          Ch·ªânh s·ª≠a
                        </Button>
                        <Button variant="danger" onClick={() => handleDeleteCategory(category.id)}>
                          X√≥a
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Modal th√™m danh m·ª•c */}
      <Modal show={showAddModal} onHide={() => setShowAddModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>T·∫°o danh m·ª•c</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group controlId="categoryName">
              <Form.Label>T√™n danh m·ª•c</Form.Label>
              <Form.Control
                type="text"
                placeholder="Nh·∫≠p t√™n danh m·ª•c"
                value={newCategory.name}
                onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}
              />
            </Form.Group>
            <Form.Group controlId="categoryType">
              <Form.Label>Lo·∫°i</Form.Label>
              <Form.Select
                value={newCategory.type}
                onChange={(e) => setNewCategory({ ...newCategory, type: e.target.value as "income" | "expense" })}
              >
                <option value="income">Thu nh·∫≠p</option>
                <option value="expense">Chi ti√™u</option>
              </Form.Select>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAddModal(false)}>
            ƒê√≥ng
          </Button>
          <Button variant="primary" onClick={createCategory}>
            L∆∞u
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Modal ch·ªânh s·ª≠a danh m·ª•c */}
      <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Ch·ªânh s·ª≠a danh m·ª•c</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group controlId="categoryName">
              <Form.Label>T√™n danh m·ª•c</Form.Label>
              <Form.Control
                type="text"
                placeholder="Nh·∫≠p t√™n danh m·ª•c"
                value={selectedCategory?.name || ""}
                onChange={(e) => setSelectedCategory((prev) => prev ? { ...prev, name: e.target.value } : null)}
              />
            </Form.Group>
            <Form.Group controlId="categoryType">
              <Form.Label>Lo·∫°i</Form.Label>
              <Form.Select
                value={selectedCategory?.type || "expense"}
                onChange={(e) =>
                  setSelectedCategory((prev) => prev ? { ...prev, type: e.target.value as "income" | "expense" } : null)
                }
              >
                <option value="income">Thu nh·∫≠p</option>
                <option value="expense">Chi ti√™u</option>
              </Form.Select>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowEditModal(false)}>
            ƒê√≥ng
          </Button>
          <Button variant="primary" onClick={updateCategory}>
            C·∫≠p nh·∫≠t
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default CategoryManager;
